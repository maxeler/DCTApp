package dct;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationGoal;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.IOType;

public class DCTManager {

	private static final String s_kernelName = "DCTInt8Kernel";
	private static final int romDepth = 512; // ROM depth
	private static final int romOffset = 255; // Offset in ROMs
	private static final int blockDim = 8; // Each sub-block (matrix tile) is of size 8 x 8


	public static void main(String[] args) {
		DCTEngineParameters params = new DCTEngineParameters(args);
		Manager manager = new Manager(params);
		manager.setClockFrequency(200);
		manager.getCurrentKernelConfig().debug.setEnableLatencyAnnotation(true);
		Kernel kernel   = new DCTKernel(manager.makeKernelParameters(s_kernelName),
				                        romDepth, romOffset, blockDim);
		manager.setKernel(kernel);
		manager.setIO(IOType.ALL_CPU);
		manager.addMaxFileConstant("romDepth", romDepth);
		manager.addMaxFileConstant("romOffset", romOffset);
		manager.addMaxFileConstant("blockDim", blockDim);
		configBuild(manager, params);
		manager.build();
	}


	private static void configBuild(Manager manager, DCTEngineParameters params) {
		manager.setEnableStreamStatusBlocks(true);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setBuildEffort(Effort.VERY_HIGH);
		buildConfig.setOptimizationGoal(OptimizationGoal.SPEED);
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(),
				params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params
				.getMPPRRetryThreshold());
	}
}