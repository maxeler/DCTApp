package dct;

import maxpower.kernel.KernelBinaryOp;
import maxpower.kernel.arithmetic.ConstDenominator;
import maxpower.ops.AssociativeOp;
import maxpower.utils.TreeReduce;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.RoundingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class DCTKernel extends Kernel {

	private static final DFEType type_fix24 = dfeFix(10,14,SignMode.TWOSCOMPLEMENT);
	private static final DFEType type_float32 = dfeFloat(8,24);
	private static final DFEType type_Ufix32 = dfeFix(16,16,SignMode.UNSIGNED);
	private static final DFEType type_Int32 = dfeInt(32);
	private static final DFEType type_Int8 = dfeUInt(8);


	private static DFEVar pack2in8(DFEVar a, DFEVar b)
	{
		/* limit to signed 4 bits */
		a = a.slice(0,4);
		b = b.slice(0,4);
		return (a # b);
	}

	private static DFEVar pack4in32(DFEVar a, DFEVar b, DFEVar c, DFEVar d)
	{
		/* limit to signed 8 bits */
		a = a.slice(0,8);
		b = b.slice(0,8);
		c = c.slice(0,8);
		d = d.slice(0,8);
		return (a # b # c # d).cast(type_Int32);
	}


	/**
	 * @param parameters Kernel parameter
	 * @param blockDim Size of the x and y dimension of the matrix tile
	 */
	protected DCTKernel(KernelParameters parameters, final int blockDim) {
		super(parameters);

		DFEVar sum1;
		DFEVectorType<DFEVar> vectorTypeFix24 = new DFEVectorType<DFEVar>(type_fix24, blockDim*blockDim);
		DFEVectorType<DFEVar> vectorTypeFloat32 = new DFEVectorType<DFEVar>(type_float32, blockDim*blockDim);
		DFEVectorType<DFEVar> vectorType_Int32 = new DFEVectorType<DFEVar>(type_Int32, blockDim*blockDim);
		DFEVectorType<DFEVar> vectorType_Int8 = new DFEVectorType<DFEVar>(type_Int8, blockDim*blockDim);

		DFEVectorType<DFEVar> vectorType_Int32Out = new DFEVectorType<DFEVar>(type_Int32, 4);

		DFEVar[] temp2d = new DFEVar[blockDim*blockDim];
		DFEVar[] sum_array = new DFEVar[blockDim];

		DFEVector<DFEVar> dct_values = vectorType_Int32.newInstance(this);
		DFEVector<DFEVar> result = vectorType_Int32Out.newInstance(this);
		AssociativeOp<DFEVar> sum = new KernelBinaryOp.Add<DFEVar>();

		DFEVar sgn = null;
		DFEVar pos = constant.var(type_Int32,+1);
		DFEVar neg = constant.var(type_Int32,-1);
		ConstDenominator by2 = new ConstDenominator(2);
		ConstDenominator by3 = new ConstDenominator(3);

		int elements[] = {2, 3, 4, 5, 10, 16, 17, 18, 24, 32, 40};
		int div_by[] = {3, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2};
		int index=0;
		DFEVar[] vals = new DFEVar[elements.length];

		DFEVector<DFEVar> inVector = io.input("Input", vectorType_Int8);
		DFEVector<DFEVar> cos = io.input("cos", vectorTypeFloat32, control.count.pulse(1)).cast(vectorTypeFix24);

		for (int i = 0; i < blockDim; i++) {
			for (int j = 0; j < blockDim; j++) {
				for (int k = 0; k < blockDim; k++) {
					optimization.pushDSPFactor(1);
					sum_array[k] = inVector[blockDim*i+k].cast(type_fix24) * cos[blockDim*k+j];
					optimization.popDSPFactor();
				}
				sum1 = TreeReduce.reduce(sum, sum_array);
				temp2d[blockDim*i+j] = sum1;
			}
		}

		for (int i = 0; i < blockDim; i++) {
			for (int j = 0; j < blockDim; j++) {
				for (int k = 0; k < blockDim; k++) {
					optimization.pushDSPFactor(1);
					sum_array[k] = cos[blockDim*k+i] * temp2d[blockDim*k+j] ;
					optimization.popDSPFactor();
				}
				sum1 = TreeReduce.reduce(sum, sum_array);
				optimization.pushRoundingMode(RoundingMode.TONEAR);
				dct_values[blockDim*i+j] <== sum1.cast(type_Int32);
				optimization.popRoundingMode();
			}
		}

		//Pack the dct results
		optimization.pushRoundingMode(RoundingMode.TRUNCATE);
		for (int i = 0; i < elements.length; i++){
			index=elements[i];
			sgn = (dct_values[index] > 0 ? pos : neg);
			DFEVar dct_val_pos = (sgn > 0? dct_values[index] : -dct_values[index]).cast(type_Ufix32);
			if(div_by[i]==2)
				vals[i] = sgn*(dct_val_pos / by2).cast(type_Int32);
			else
				vals[i] = sgn*(dct_val_pos / by3).cast(type_Int32);
		}
		optimization.popRoundingMode();


		result[0] <== (pack4in32(dct_values[0], dct_values[1], pack2in8(vals[0], vals[1]),
		pack2in8(vals[2], vals[3])));

		result[1] <== (pack4in32(pack2in8(dct_values[6],dct_values[7]),
		dct_values[8],dct_values[9], pack2in8(vals[4],dct_values[11])));

		result[2] <== (pack4in32(pack2in8(dct_values[12], dct_values[13]),
		pack2in8(vals[5], vals[6]), pack2in8(vals[7], dct_values[19]),
		pack2in8(vals[8], dct_values[25])));

		result[3] <== (pack4in32(pack2in8(dct_values[26], dct_values[27]),
		pack2in8(vals[9], dct_values[33]), pack2in8(vals[10], dct_values[41]),
		pack2in8(dct_values[48] , dct_values[56])));

		io.output("block_out_HW", result, vectorType_Int32Out);
	}
}